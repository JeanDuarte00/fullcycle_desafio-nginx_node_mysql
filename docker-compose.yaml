version: '3.8'

networks:
  desafioNetwork:
    name: desafioNetwork
    driver: bridge

volumes:
  node_modules:

services:

  adminer:
    image: adminer
    container_name: mysql_admin
    restart: always
    env_file:
     - ./environments/dev.env
    ports:
      - 8081:8080
    networks:
    - desafioNetwork

  nginx_desafio:
    container_name: nginx_desafio
    hostname: nginx
    build: 
      context: ./nginx-proxy
      dockerfile: Dockerfile
    networks:
      - desafioNetwork
    ports:
      - "8080:80"
    depends_on:
      - nodeapp_desafio

  nodeapp_desafio:
    container_name: nodeapp_desafio
    build:
      context: ./node-app
      dockerfile: Dockerfile
    image: nodeapp_desafio_init
    volumes:
      - ./node-app:/usr/src/app
      - ./environments:/usr/src/app/environments
      - node_modules:/usr/src/app/node_modules
    networks:
      - desafioNetwork
    tty: true
    ports:
      - 3000:3000
    depends_on:
      mysql_desafio:
        condition: service_healthy
    
  mysql_desafio:
    image: mysql:${MYSQL_VERSION}
    container_name: ${DATABASE_CONTAINER_NAME}
    working_dir: /var/lib/mysql
    command: --innodb-use-native-aio=0
    restart: always
    tty: true
    ports:
      - 3306:3306
    expose:
      - "3306"
    volumes:
      - ./mysql/database:/var/lib/mysql
      - ./mysql/scripts/:/var/lib/mysql/scripts
    env_file:
     - ./environments/dev.env
    networks:
      - desafioNetwork
    healthcheck:
        test: "mysql -uroot -proot --execute \"SHOW DATABASES;\""
        interval: 2s
        timeout: 20s
        retries: 20